{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Socket = void 0;\n\nconst socket_io_parser_1 = require(\"socket.io-parser\");\n\nconst on_js_1 = require(\"./on.js\");\n\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\n\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\n\n\nconst debug = debug_1.default(\"socket.io-client:socket\"); // debug()\n\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\n\nconst RESERVED_EVENTS = Object.freeze({\n  connect: 1,\n  connect_error: 1,\n  disconnect: 1,\n  disconnecting: 1,\n  // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n  newListener: 1,\n  removeListener: 1\n});\n\nclass Socket extends component_emitter_1.Emitter {\n  /**\r\n   * `Socket` constructor.\r\n   *\r\n   * @public\r\n   */\n  constructor(io, nsp, opts) {\n    super();\n    this.connected = false;\n    this.disconnected = true;\n    this.receiveBuffer = [];\n    this.sendBuffer = [];\n    this.ids = 0;\n    this.acks = {};\n    this.flags = {};\n    this.io = io;\n    this.nsp = nsp;\n\n    if (opts && opts.auth) {\n      this.auth = opts.auth;\n    }\n\n    if (this.io._autoConnect) this.open();\n  }\n  /**\r\n   * Subscribe to open, close and packet events\r\n   *\r\n   * @private\r\n   */\n\n\n  subEvents() {\n    if (this.subs) return;\n    const io = this.io;\n    this.subs = [on_js_1.on(io, \"open\", this.onopen.bind(this)), on_js_1.on(io, \"packet\", this.onpacket.bind(this)), on_js_1.on(io, \"error\", this.onerror.bind(this)), on_js_1.on(io, \"close\", this.onclose.bind(this))];\n  }\n  /**\r\n   * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n   */\n\n\n  get active() {\n    return !!this.subs;\n  }\n  /**\r\n   * \"Opens\" the socket.\r\n   *\r\n   * @public\r\n   */\n\n\n  connect() {\n    if (this.connected) return this;\n    this.subEvents();\n    if (!this.io[\"_reconnecting\"]) this.io.open(); // ensure open\n\n    if (\"open\" === this.io._readyState) this.onopen();\n    return this;\n  }\n  /**\r\n   * Alias for connect()\r\n   */\n\n\n  open() {\n    return this.connect();\n  }\n  /**\r\n   * Sends a `message` event.\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  send() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    args.unshift(\"message\");\n    this.emit.apply(this, args);\n    return this;\n  }\n  /**\r\n   * Override `emit`.\r\n   * If the event is in `events`, it's emitted normally.\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  emit(ev) {\n    if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n      throw new Error('\"' + ev + '\" is a reserved event name');\n    }\n\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n\n    args.unshift(ev);\n    const packet = {\n      type: socket_io_parser_1.PacketType.EVENT,\n      data: args\n    };\n    packet.options = {};\n    packet.options.compress = this.flags.compress !== false; // event ack callback\n\n    if (\"function\" === typeof args[args.length - 1]) {\n      const id = this.ids++;\n      debug(\"emitting packet with ack id %d\", id);\n      const ack = args.pop();\n\n      this._registerAckCallback(id, ack);\n\n      packet.id = id;\n    }\n\n    const isTransportWritable = this.io.engine && this.io.engine.transport && this.io.engine.transport.writable;\n    const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n\n    if (discardPacket) {\n      debug(\"discard packet as the transport is not currently writable\");\n    } else if (this.connected) {\n      this.packet(packet);\n    } else {\n      this.sendBuffer.push(packet);\n    }\n\n    this.flags = {};\n    return this;\n  }\n  /**\r\n   * @private\r\n   */\n\n\n  _registerAckCallback(id, ack) {\n    var _this = this;\n\n    const timeout = this.flags.timeout;\n\n    if (timeout === undefined) {\n      this.acks[id] = ack;\n      return;\n    } // @ts-ignore\n\n\n    const timer = this.io.setTimeoutFn(() => {\n      delete this.acks[id];\n\n      for (let i = 0; i < this.sendBuffer.length; i++) {\n        if (this.sendBuffer[i].id === id) {\n          debug(\"removing packet with ack id %d from the buffer\", id);\n          this.sendBuffer.splice(i, 1);\n        }\n      }\n\n      debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\n      ack.call(this, new Error(\"operation has timed out\"));\n    }, timeout);\n\n    this.acks[id] = function () {\n      // @ts-ignore\n      _this.io.clearTimeoutFn(timer);\n\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      ack.apply(_this, [null, ...args]);\n    };\n  }\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  packet(packet) {\n    packet.nsp = this.nsp;\n\n    this.io._packet(packet);\n  }\n  /**\r\n   * Called upon engine `open`.\r\n   *\r\n   * @private\r\n   */\n\n\n  onopen() {\n    debug(\"transport is open - connecting\");\n\n    if (typeof this.auth == \"function\") {\n      this.auth(data => {\n        this.packet({\n          type: socket_io_parser_1.PacketType.CONNECT,\n          data\n        });\n      });\n    } else {\n      this.packet({\n        type: socket_io_parser_1.PacketType.CONNECT,\n        data: this.auth\n      });\n    }\n  }\n  /**\r\n   * Called upon engine or manager `error`.\r\n   *\r\n   * @param err\r\n   * @private\r\n   */\n\n\n  onerror(err) {\n    if (!this.connected) {\n      this.emitReserved(\"connect_error\", err);\n    }\n  }\n  /**\r\n   * Called upon engine `close`.\r\n   *\r\n   * @param reason\r\n   * @private\r\n   */\n\n\n  onclose(reason) {\n    debug(\"close (%s)\", reason);\n    this.connected = false;\n    this.disconnected = true;\n    delete this.id;\n    this.emitReserved(\"disconnect\", reason);\n  }\n  /**\r\n   * Called with socket packet.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  onpacket(packet) {\n    const sameNamespace = packet.nsp === this.nsp;\n    if (!sameNamespace) return;\n\n    switch (packet.type) {\n      case socket_io_parser_1.PacketType.CONNECT:\n        if (packet.data && packet.data.sid) {\n          const id = packet.data.sid;\n          this.onconnect(id);\n        } else {\n          this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n        }\n\n        break;\n\n      case socket_io_parser_1.PacketType.EVENT:\n        this.onevent(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.BINARY_EVENT:\n        this.onevent(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.ACK:\n        this.onack(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.BINARY_ACK:\n        this.onack(packet);\n        break;\n\n      case socket_io_parser_1.PacketType.DISCONNECT:\n        this.ondisconnect();\n        break;\n\n      case socket_io_parser_1.PacketType.CONNECT_ERROR:\n        this.destroy();\n        const err = new Error(packet.data.message); // @ts-ignore\n\n        err.data = packet.data.data;\n        this.emitReserved(\"connect_error\", err);\n        break;\n    }\n  }\n  /**\r\n   * Called upon a server event.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  onevent(packet) {\n    const args = packet.data || [];\n    debug(\"emitting event %j\", args);\n\n    if (null != packet.id) {\n      debug(\"attaching ack callback to event\");\n      args.push(this.ack(packet.id));\n    }\n\n    if (this.connected) {\n      this.emitEvent(args);\n    } else {\n      this.receiveBuffer.push(Object.freeze(args));\n    }\n  }\n\n  emitEvent(args) {\n    if (this._anyListeners && this._anyListeners.length) {\n      const listeners = this._anyListeners.slice();\n\n      for (const listener of listeners) {\n        listener.apply(this, args);\n      }\n    }\n\n    super.emit.apply(this, args);\n  }\n  /**\r\n   * Produces an ack callback to emit with an event.\r\n   *\r\n   * @private\r\n   */\n\n\n  ack(id) {\n    const self = this;\n    let sent = false;\n    return function () {\n      // prevent double callbacks\n      if (sent) return;\n      sent = true;\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      debug(\"sending ack %j\", args);\n      self.packet({\n        type: socket_io_parser_1.PacketType.ACK,\n        id: id,\n        data: args\n      });\n    };\n  }\n  /**\r\n   * Called upon a server acknowlegement.\r\n   *\r\n   * @param packet\r\n   * @private\r\n   */\n\n\n  onack(packet) {\n    const ack = this.acks[packet.id];\n\n    if (\"function\" === typeof ack) {\n      debug(\"calling ack %s with %j\", packet.id, packet.data);\n      ack.apply(this, packet.data);\n      delete this.acks[packet.id];\n    } else {\n      debug(\"bad ack %s\", packet.id);\n    }\n  }\n  /**\r\n   * Called upon server connect.\r\n   *\r\n   * @private\r\n   */\n\n\n  onconnect(id) {\n    debug(\"socket connected with id %s\", id);\n    this.id = id;\n    this.connected = true;\n    this.disconnected = false;\n    this.emitBuffered();\n    this.emitReserved(\"connect\");\n  }\n  /**\r\n   * Emit buffered events (received and emitted).\r\n   *\r\n   * @private\r\n   */\n\n\n  emitBuffered() {\n    this.receiveBuffer.forEach(args => this.emitEvent(args));\n    this.receiveBuffer = [];\n    this.sendBuffer.forEach(packet => this.packet(packet));\n    this.sendBuffer = [];\n  }\n  /**\r\n   * Called upon server disconnect.\r\n   *\r\n   * @private\r\n   */\n\n\n  ondisconnect() {\n    debug(\"server disconnect (%s)\", this.nsp);\n    this.destroy();\n    this.onclose(\"io server disconnect\");\n  }\n  /**\r\n   * Called upon forced client/server side disconnections,\r\n   * this method ensures the manager stops tracking us and\r\n   * that reconnections don't get triggered for this.\r\n   *\r\n   * @private\r\n   */\n\n\n  destroy() {\n    if (this.subs) {\n      // clean subscriptions to avoid reconnections\n      this.subs.forEach(subDestroy => subDestroy());\n      this.subs = undefined;\n    }\n\n    this.io[\"_destroy\"](this);\n  }\n  /**\r\n   * Disconnects the socket manually.\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  disconnect() {\n    if (this.connected) {\n      debug(\"performing disconnect (%s)\", this.nsp);\n      this.packet({\n        type: socket_io_parser_1.PacketType.DISCONNECT\n      });\n    } // remove socket from pool\n\n\n    this.destroy();\n\n    if (this.connected) {\n      // fire events\n      this.onclose(\"io client disconnect\");\n    }\n\n    return this;\n  }\n  /**\r\n   * Alias for disconnect()\r\n   *\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  close() {\n    return this.disconnect();\n  }\n  /**\r\n   * Sets the compress flag.\r\n   *\r\n   * @param compress - if `true`, compresses the sending data\r\n   * @return self\r\n   * @public\r\n   */\n\n\n  compress(compress) {\n    this.flags.compress = compress;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n   * ready to send messages.\r\n   *\r\n   * @returns self\r\n   * @public\r\n   */\n\n\n  get volatile() {\n    this.flags.volatile = true;\n    return this;\n  }\n  /**\r\n   * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n   * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n   *\r\n   * ```\r\n   * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n   *   if (err) {\r\n   *     // the server did not acknowledge the event in the given delay\r\n   *   }\r\n   * });\r\n   * ```\r\n   *\r\n   * @returns self\r\n   * @public\r\n   */\n\n\n  timeout(timeout) {\n    this.flags.timeout = timeout;\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback.\r\n   *\r\n   * @param listener\r\n   * @public\r\n   */\n\n\n  onAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.push(listener);\n\n    return this;\n  }\n  /**\r\n   * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n   * callback. The listener is added to the beginning of the listeners array.\r\n   *\r\n   * @param listener\r\n   * @public\r\n   */\n\n\n  prependAny(listener) {\n    this._anyListeners = this._anyListeners || [];\n\n    this._anyListeners.unshift(listener);\n\n    return this;\n  }\n  /**\r\n   * Removes the listener that will be fired when any event is emitted.\r\n   *\r\n   * @param listener\r\n   * @public\r\n   */\n\n\n  offAny(listener) {\n    if (!this._anyListeners) {\n      return this;\n    }\n\n    if (listener) {\n      const listeners = this._anyListeners;\n\n      for (let i = 0; i < listeners.length; i++) {\n        if (listener === listeners[i]) {\n          listeners.splice(i, 1);\n          return this;\n        }\n      }\n    } else {\n      this._anyListeners = [];\n    }\n\n    return this;\n  }\n  /**\r\n   * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n   * e.g. to remove listeners.\r\n   *\r\n   * @public\r\n   */\n\n\n  listenersAny() {\n    return this._anyListeners || [];\n  }\n\n}\n\nexports.Socket = Socket;","map":{"version":3,"sources":["C:/Workspace/Skull-King-React/node_modules/socket.io-client/build/cjs/socket.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","Socket","socket_io_parser_1","require","on_js_1","component_emitter_1","debug_1","debug","default","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","removeListener","Emitter","constructor","io","nsp","opts","connected","disconnected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","open","subEvents","subs","on","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","args","unshift","emit","apply","ev","hasOwnProperty","Error","packet","type","PacketType","EVENT","data","options","compress","length","id","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","discardPacket","volatile","push","timeout","undefined","timer","setTimeoutFn","i","splice","call","clearTimeoutFn","_packet","CONNECT","err","emitReserved","reason","sameNamespace","sid","onconnect","onevent","BINARY_EVENT","ACK","onack","BINARY_ACK","DISCONNECT","ondisconnect","CONNECT_ERROR","destroy","message","emitEvent","_anyListeners","listeners","slice","listener","self","sent","emitBuffered","forEach","subDestroy","close","onAny","prependAny","offAny","listenersAny"],"mappings":"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","sourcesContent":["\"use strict\";\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Socket = void 0;\r\nconst socket_io_parser_1 = require(\"socket.io-parser\");\r\nconst on_js_1 = require(\"./on.js\");\r\nconst component_emitter_1 = require(\"@socket.io/component-emitter\");\r\nconst debug_1 = __importDefault(require(\"debug\")); // debug()\r\nconst debug = debug_1.default(\"socket.io-client:socket\"); // debug()\r\n/**\r\n * Internal events.\r\n * These events can't be emitted by the user.\r\n */\r\nconst RESERVED_EVENTS = Object.freeze({\r\n    connect: 1,\r\n    connect_error: 1,\r\n    disconnect: 1,\r\n    disconnecting: 1,\r\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\r\n    newListener: 1,\r\n    removeListener: 1,\r\n});\r\nclass Socket extends component_emitter_1.Emitter {\r\n    /**\r\n     * `Socket` constructor.\r\n     *\r\n     * @public\r\n     */\r\n    constructor(io, nsp, opts) {\r\n        super();\r\n        this.connected = false;\r\n        this.disconnected = true;\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer = [];\r\n        this.ids = 0;\r\n        this.acks = {};\r\n        this.flags = {};\r\n        this.io = io;\r\n        this.nsp = nsp;\r\n        if (opts && opts.auth) {\r\n            this.auth = opts.auth;\r\n        }\r\n        if (this.io._autoConnect)\r\n            this.open();\r\n    }\r\n    /**\r\n     * Subscribe to open, close and packet events\r\n     *\r\n     * @private\r\n     */\r\n    subEvents() {\r\n        if (this.subs)\r\n            return;\r\n        const io = this.io;\r\n        this.subs = [\r\n            on_js_1.on(io, \"open\", this.onopen.bind(this)),\r\n            on_js_1.on(io, \"packet\", this.onpacket.bind(this)),\r\n            on_js_1.on(io, \"error\", this.onerror.bind(this)),\r\n            on_js_1.on(io, \"close\", this.onclose.bind(this)),\r\n        ];\r\n    }\r\n    /**\r\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\r\n     */\r\n    get active() {\r\n        return !!this.subs;\r\n    }\r\n    /**\r\n     * \"Opens\" the socket.\r\n     *\r\n     * @public\r\n     */\r\n    connect() {\r\n        if (this.connected)\r\n            return this;\r\n        this.subEvents();\r\n        if (!this.io[\"_reconnecting\"])\r\n            this.io.open(); // ensure open\r\n        if (\"open\" === this.io._readyState)\r\n            this.onopen();\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for connect()\r\n     */\r\n    open() {\r\n        return this.connect();\r\n    }\r\n    /**\r\n     * Sends a `message` event.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    send(...args) {\r\n        args.unshift(\"message\");\r\n        this.emit.apply(this, args);\r\n        return this;\r\n    }\r\n    /**\r\n     * Override `emit`.\r\n     * If the event is in `events`, it's emitted normally.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    emit(ev, ...args) {\r\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\r\n            throw new Error('\"' + ev + '\" is a reserved event name');\r\n        }\r\n        args.unshift(ev);\r\n        const packet = {\r\n            type: socket_io_parser_1.PacketType.EVENT,\r\n            data: args,\r\n        };\r\n        packet.options = {};\r\n        packet.options.compress = this.flags.compress !== false;\r\n        // event ack callback\r\n        if (\"function\" === typeof args[args.length - 1]) {\r\n            const id = this.ids++;\r\n            debug(\"emitting packet with ack id %d\", id);\r\n            const ack = args.pop();\r\n            this._registerAckCallback(id, ack);\r\n            packet.id = id;\r\n        }\r\n        const isTransportWritable = this.io.engine &&\r\n            this.io.engine.transport &&\r\n            this.io.engine.transport.writable;\r\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\r\n        if (discardPacket) {\r\n            debug(\"discard packet as the transport is not currently writable\");\r\n        }\r\n        else if (this.connected) {\r\n            this.packet(packet);\r\n        }\r\n        else {\r\n            this.sendBuffer.push(packet);\r\n        }\r\n        this.flags = {};\r\n        return this;\r\n    }\r\n    /**\r\n     * @private\r\n     */\r\n    _registerAckCallback(id, ack) {\r\n        const timeout = this.flags.timeout;\r\n        if (timeout === undefined) {\r\n            this.acks[id] = ack;\r\n            return;\r\n        }\r\n        // @ts-ignore\r\n        const timer = this.io.setTimeoutFn(() => {\r\n            delete this.acks[id];\r\n            for (let i = 0; i < this.sendBuffer.length; i++) {\r\n                if (this.sendBuffer[i].id === id) {\r\n                    debug(\"removing packet with ack id %d from the buffer\", id);\r\n                    this.sendBuffer.splice(i, 1);\r\n                }\r\n            }\r\n            debug(\"event with ack id %d has timed out after %d ms\", id, timeout);\r\n            ack.call(this, new Error(\"operation has timed out\"));\r\n        }, timeout);\r\n        this.acks[id] = (...args) => {\r\n            // @ts-ignore\r\n            this.io.clearTimeoutFn(timer);\r\n            ack.apply(this, [null, ...args]);\r\n        };\r\n    }\r\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    packet(packet) {\r\n        packet.nsp = this.nsp;\r\n        this.io._packet(packet);\r\n    }\r\n    /**\r\n     * Called upon engine `open`.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        debug(\"transport is open - connecting\");\r\n        if (typeof this.auth == \"function\") {\r\n            this.auth((data) => {\r\n                this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data });\r\n            });\r\n        }\r\n        else {\r\n            this.packet({ type: socket_io_parser_1.PacketType.CONNECT, data: this.auth });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine or manager `error`.\r\n     *\r\n     * @param err\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        if (!this.connected) {\r\n            this.emitReserved(\"connect_error\", err);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon engine `close`.\r\n     *\r\n     * @param reason\r\n     * @private\r\n     */\r\n    onclose(reason) {\r\n        debug(\"close (%s)\", reason);\r\n        this.connected = false;\r\n        this.disconnected = true;\r\n        delete this.id;\r\n        this.emitReserved(\"disconnect\", reason);\r\n    }\r\n    /**\r\n     * Called with socket packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onpacket(packet) {\r\n        const sameNamespace = packet.nsp === this.nsp;\r\n        if (!sameNamespace)\r\n            return;\r\n        switch (packet.type) {\r\n            case socket_io_parser_1.PacketType.CONNECT:\r\n                if (packet.data && packet.data.sid) {\r\n                    const id = packet.data.sid;\r\n                    this.onconnect(id);\r\n                }\r\n                else {\r\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\r\n                }\r\n                break;\r\n            case socket_io_parser_1.PacketType.EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.BINARY_EVENT:\r\n                this.onevent(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.BINARY_ACK:\r\n                this.onack(packet);\r\n                break;\r\n            case socket_io_parser_1.PacketType.DISCONNECT:\r\n                this.ondisconnect();\r\n                break;\r\n            case socket_io_parser_1.PacketType.CONNECT_ERROR:\r\n                this.destroy();\r\n                const err = new Error(packet.data.message);\r\n                // @ts-ignore\r\n                err.data = packet.data.data;\r\n                this.emitReserved(\"connect_error\", err);\r\n                break;\r\n        }\r\n    }\r\n    /**\r\n     * Called upon a server event.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onevent(packet) {\r\n        const args = packet.data || [];\r\n        debug(\"emitting event %j\", args);\r\n        if (null != packet.id) {\r\n            debug(\"attaching ack callback to event\");\r\n            args.push(this.ack(packet.id));\r\n        }\r\n        if (this.connected) {\r\n            this.emitEvent(args);\r\n        }\r\n        else {\r\n            this.receiveBuffer.push(Object.freeze(args));\r\n        }\r\n    }\r\n    emitEvent(args) {\r\n        if (this._anyListeners && this._anyListeners.length) {\r\n            const listeners = this._anyListeners.slice();\r\n            for (const listener of listeners) {\r\n                listener.apply(this, args);\r\n            }\r\n        }\r\n        super.emit.apply(this, args);\r\n    }\r\n    /**\r\n     * Produces an ack callback to emit with an event.\r\n     *\r\n     * @private\r\n     */\r\n    ack(id) {\r\n        const self = this;\r\n        let sent = false;\r\n        return function (...args) {\r\n            // prevent double callbacks\r\n            if (sent)\r\n                return;\r\n            sent = true;\r\n            debug(\"sending ack %j\", args);\r\n            self.packet({\r\n                type: socket_io_parser_1.PacketType.ACK,\r\n                id: id,\r\n                data: args,\r\n            });\r\n        };\r\n    }\r\n    /**\r\n     * Called upon a server acknowlegement.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    onack(packet) {\r\n        const ack = this.acks[packet.id];\r\n        if (\"function\" === typeof ack) {\r\n            debug(\"calling ack %s with %j\", packet.id, packet.data);\r\n            ack.apply(this, packet.data);\r\n            delete this.acks[packet.id];\r\n        }\r\n        else {\r\n            debug(\"bad ack %s\", packet.id);\r\n        }\r\n    }\r\n    /**\r\n     * Called upon server connect.\r\n     *\r\n     * @private\r\n     */\r\n    onconnect(id) {\r\n        debug(\"socket connected with id %s\", id);\r\n        this.id = id;\r\n        this.connected = true;\r\n        this.disconnected = false;\r\n        this.emitBuffered();\r\n        this.emitReserved(\"connect\");\r\n    }\r\n    /**\r\n     * Emit buffered events (received and emitted).\r\n     *\r\n     * @private\r\n     */\r\n    emitBuffered() {\r\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\r\n        this.receiveBuffer = [];\r\n        this.sendBuffer.forEach((packet) => this.packet(packet));\r\n        this.sendBuffer = [];\r\n    }\r\n    /**\r\n     * Called upon server disconnect.\r\n     *\r\n     * @private\r\n     */\r\n    ondisconnect() {\r\n        debug(\"server disconnect (%s)\", this.nsp);\r\n        this.destroy();\r\n        this.onclose(\"io server disconnect\");\r\n    }\r\n    /**\r\n     * Called upon forced client/server side disconnections,\r\n     * this method ensures the manager stops tracking us and\r\n     * that reconnections don't get triggered for this.\r\n     *\r\n     * @private\r\n     */\r\n    destroy() {\r\n        if (this.subs) {\r\n            // clean subscriptions to avoid reconnections\r\n            this.subs.forEach((subDestroy) => subDestroy());\r\n            this.subs = undefined;\r\n        }\r\n        this.io[\"_destroy\"](this);\r\n    }\r\n    /**\r\n     * Disconnects the socket manually.\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    disconnect() {\r\n        if (this.connected) {\r\n            debug(\"performing disconnect (%s)\", this.nsp);\r\n            this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });\r\n        }\r\n        // remove socket from pool\r\n        this.destroy();\r\n        if (this.connected) {\r\n            // fire events\r\n            this.onclose(\"io client disconnect\");\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for disconnect()\r\n     *\r\n     * @return self\r\n     * @public\r\n     */\r\n    close() {\r\n        return this.disconnect();\r\n    }\r\n    /**\r\n     * Sets the compress flag.\r\n     *\r\n     * @param compress - if `true`, compresses the sending data\r\n     * @return self\r\n     * @public\r\n     */\r\n    compress(compress) {\r\n        this.flags.compress = compress;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\r\n     * ready to send messages.\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    get volatile() {\r\n        this.flags.volatile = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\r\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\r\n     *\r\n     * ```\r\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\r\n     *   if (err) {\r\n     *     // the server did not acknowledge the event in the given delay\r\n     *   }\r\n     * });\r\n     * ```\r\n     *\r\n     * @returns self\r\n     * @public\r\n     */\r\n    timeout(timeout) {\r\n        this.flags.timeout = timeout;\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    onAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.push(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\r\n     * callback. The listener is added to the beginning of the listeners array.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    prependAny(listener) {\r\n        this._anyListeners = this._anyListeners || [];\r\n        this._anyListeners.unshift(listener);\r\n        return this;\r\n    }\r\n    /**\r\n     * Removes the listener that will be fired when any event is emitted.\r\n     *\r\n     * @param listener\r\n     * @public\r\n     */\r\n    offAny(listener) {\r\n        if (!this._anyListeners) {\r\n            return this;\r\n        }\r\n        if (listener) {\r\n            const listeners = this._anyListeners;\r\n            for (let i = 0; i < listeners.length; i++) {\r\n                if (listener === listeners[i]) {\r\n                    listeners.splice(i, 1);\r\n                    return this;\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            this._anyListeners = [];\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\r\n     * e.g. to remove listeners.\r\n     *\r\n     * @public\r\n     */\r\n    listenersAny() {\r\n        return this._anyListeners || [];\r\n    }\r\n}\r\nexports.Socket = Socket;\r\n"]},"metadata":{},"sourceType":"script"}