{"ast":null,"code":"var _jsxFileName = \"C:\\\\Workspace\\\\Skull-King-React\\\\src\\\\components\\\\LeaderBoardPage\\\\LeaderBoardPage.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AppContext } from '../../Contexts/AppContext';\nimport PlayerList from '../PlayerList/PlayerList';\nimport Button from '../UI/Button/Button';\nimport ApplicationInput from '../UI/Input/ApplicationInput';\nimport MainView from '../UI/MainView/MainView';\nimport TitleHeader from '../UI/TitleHeader/TitleHeader';\nimport styles from './LeaderBoardPage.module.css';\nimport socket from '../../Socket/Socket';\nimport Label from '../UI/Label/Label';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LeaderBoardPage = () => {\n  _s();\n\n  const {\n    id,\n    setId,\n    name,\n    gameId,\n    host,\n    setHost,\n    playerList,\n    setPlayerList,\n    currentRound,\n    setCurrentRound,\n    scoreboard,\n    setScoreboard,\n    setWinner,\n    setHarryToggle,\n    setRascalToggle\n  } = useContext(AppContext);\n  const navigate = useNavigate();\n  const [leaders, setLeaders] = useState([]);\n  useEffect(() => {\n    socket.on('leaderboard', data => {\n      const john = data.players.players;\n      console.log('JOHN: ', john);\n      setLeaders([...john].sort((a, b) => b.score - a.score));\n    });\n    socket.on('isRoundOver', data => {\n      console.log('DATA: ', data);\n      setScoreboard(data.scoreBoard);\n\n      if (data.gameIsOver) {\n        setHarryToggle(true);\n        setRascalToggle(true);\n        navigate('/gameover');\n      } else if (data.roundIsOver) {\n        setHarryToggle(true);\n        setRascalToggle(true);\n        setCurrentRound(currentRound + 1);\n        navigate('/bid');\n      } else {\n        console.log('round not over');\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (leaders.length > 0) {\n      console.log('LEADERS: ', leaders[0].name);\n      setWinner(leaders[0]);\n    }\n  }, [leaders]);\n  return /*#__PURE__*/_jsxDEV(MainView, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.leaderBoardPage,\n      children: [/*#__PURE__*/_jsxDEV(TitleHeader, {\n        children: \"Leaderboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.scoreCard,\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          name: \"Player\",\n          score: \"Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this), leaders.map(player => {\n          return /*#__PURE__*/_jsxDEV(Row, {\n            name: player.name,\n            score: player.score\n          }, player.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: id === host.id ? leaders.length === playerList.length ? /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.button,\n          onClick: () => {\n            socket.emit('isRoundOver', {\n              gameId: gameId\n            });\n          },\n          children: \"Next Round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Label, {\n          className: styles.waitingLabel,\n          children: \"Waiting for everyone...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Label, {\n          className: styles.waitingLabel,\n          children: \"Waiting for next round...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LeaderBoardPage, \"O0T6oF8B2p5zXuVV2medlOj3QbE=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LeaderBoardPage;\n\nconst Row = _ref => {\n  let {\n    name,\n    score\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Row;\nexport default LeaderBoardPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LeaderBoardPage\");\n$RefreshReg$(_c2, \"Row\");","map":{"version":3,"sources":["C:/Workspace/Skull-King-React/src/components/LeaderBoardPage/LeaderBoardPage.js"],"names":["useContext","useEffect","useState","useNavigate","AppContext","PlayerList","Button","ApplicationInput","MainView","TitleHeader","styles","socket","Label","LeaderBoardPage","id","setId","name","gameId","host","setHost","playerList","setPlayerList","currentRound","setCurrentRound","scoreboard","setScoreboard","setWinner","setHarryToggle","setRascalToggle","navigate","leaders","setLeaders","on","data","john","players","console","log","sort","a","b","score","scoreBoard","gameIsOver","roundIsOver","length","leaderBoardPage","scoreCard","map","player","button","emit","waitingLabel","Row"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { AppContext } from '../../Contexts/AppContext';\r\nimport PlayerList from '../PlayerList/PlayerList';\r\nimport Button from '../UI/Button/Button';\r\nimport ApplicationInput from '../UI/Input/ApplicationInput';\r\nimport MainView from '../UI/MainView/MainView';\r\nimport TitleHeader from '../UI/TitleHeader/TitleHeader';\r\nimport styles from './LeaderBoardPage.module.css';\r\nimport socket from '../../Socket/Socket';\r\nimport Label from '../UI/Label/Label';\r\n\r\nconst LeaderBoardPage = () => {\r\n    const {\r\n        id,\r\n        setId,\r\n        name,\r\n        gameId,\r\n        host,\r\n        setHost,\r\n        playerList,\r\n        setPlayerList,\r\n        currentRound,\r\n        setCurrentRound,\r\n        scoreboard,\r\n        setScoreboard,\r\n        setWinner,\r\n        setHarryToggle,\r\n        setRascalToggle,\r\n    } = useContext(AppContext);\r\n    const navigate = useNavigate();\r\n\r\n    const [leaders, setLeaders] = useState([]);\r\n\r\n    useEffect(() => {\r\n        socket.on('leaderboard', (data) => {\r\n            const john = data.players.players;\r\n            console.log('JOHN: ', john);\r\n            setLeaders([...john].sort((a, b) => b.score - a.score));\r\n        });\r\n\r\n        socket.on('isRoundOver', (data) => {\r\n            console.log('DATA: ', data);\r\n            setScoreboard(data.scoreBoard);\r\n            if (data.gameIsOver) {\r\n                setHarryToggle(true);\r\n                setRascalToggle(true);\r\n                navigate('/gameover');\r\n            } else if (data.roundIsOver) {\r\n                setHarryToggle(true);\r\n                setRascalToggle(true);\r\n                setCurrentRound(currentRound + 1);\r\n                navigate('/bid');\r\n            } else {\r\n                console.log('round not over');\r\n            }\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (leaders.length > 0) {\r\n            console.log('LEADERS: ', leaders[0].name);\r\n            setWinner(leaders[0]);\r\n        }\r\n    }, [leaders]);\r\n\r\n    return (\r\n        <MainView>\r\n            <div className={styles.leaderBoardPage}>\r\n                <TitleHeader>Leaderboard</TitleHeader>\r\n                <table className={styles.scoreCard}>\r\n                    <Row name=\"Player\" score=\"Score\" />\r\n                    <Row />\r\n                    {leaders.map((player) => {\r\n                        return (\r\n                            <Row\r\n                                name={player.name}\r\n                                score={player.score}\r\n                                key={player.id}\r\n                            />\r\n                        );\r\n                    })}\r\n                </table>\r\n                <div>\r\n                    {id === host.id ? (\r\n                        leaders.length === playerList.length ? (\r\n                            <Button\r\n                                className={styles.button}\r\n                                onClick={() => {\r\n                                    socket.emit('isRoundOver', {\r\n                                        gameId: gameId,\r\n                                    });\r\n                                }}\r\n                            >\r\n                                Next Round\r\n                            </Button>\r\n                        ) : (\r\n                            <Label className={styles.waitingLabel}>\r\n                                Waiting for everyone...\r\n                            </Label>\r\n                        )\r\n                    ) : (\r\n                        <Label className={styles.waitingLabel}>\r\n                            Waiting for next round...\r\n                        </Label>\r\n                    )}\r\n                </div>\r\n            </div>\r\n        </MainView>\r\n    );\r\n};\r\n\r\nconst Row = ({ name, score }) => {\r\n    return (\r\n        <tr>\r\n            <td>{name}</td>\r\n            <td>{score}</td>\r\n        </tr>\r\n    );\r\n};\r\n\r\nexport default LeaderBoardPage;\r\n"]},"metadata":{},"sourceType":"module"}