{"ast":null,"code":"var _jsxFileName = \"/Users/elijahgreene/Workspace/Skull-King-React/skull-king/src/components/LeaderBoardPage/LeaderBoardPage.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AppContext } from '../../Contexts/AppContext';\nimport PlayerList from '../PlayerList/PlayerList';\nimport Button from '../UI/Button/Button';\nimport ApplicationInput from '../UI/Input/ApplicationInput';\nimport MainView from '../UI/MainView/MainView';\nimport TitleHeader from '../UI/TitleHeader/TitleHeader';\nimport styles from './LeaderBoardPage.module.css';\nimport socket from '../../Socket/Socket';\nimport Label from '../UI/Label/Label';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LeaderBoardPage = () => {\n  _s();\n\n  const {\n    id,\n    setId,\n    name,\n    gameId,\n    host,\n    setHost,\n    playerList,\n    setPlayerList,\n    currentRound,\n    setCurrentRound,\n    scoreboard,\n    setScoreboard,\n    setWinner\n  } = useContext(AppContext);\n  const navigate = useNavigate();\n  const [leaders, setLeaders] = useState([]);\n  useEffect(() => {\n    socket.on('leaderboard', data => {\n      const john = data.players.players;\n      console.log('JOHN: ', john);\n      setLeaders([...john].sort((a, b) => b.score - a.score));\n    });\n    socket.on('isRoundOver', data => {\n      if (data.gameIsOver) {\n        navigate('/gameover');\n      } else if (data.roundIsOver) {\n        setCurrentRound(currentRound + 1);\n        navigate('/bid');\n      } else {\n        console.log('round not over');\n      }\n    });\n  }, []);\n  useEffect(() => {\n    if (leaders.length > 0) {\n      console.log('LEADERS: ', leaders[0].name);\n      setWinner(leaders[0]);\n    }\n  }, [leaders]);\n  return /*#__PURE__*/_jsxDEV(MainView, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.leaderBoardPage,\n      children: [/*#__PURE__*/_jsxDEV(TitleHeader, {\n        children: \"Leaderboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: styles.scoreCard,\n        children: [/*#__PURE__*/_jsxDEV(Row, {\n          name: \"Player\",\n          score: \"Score\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Row, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 21\n        }, this), leaders.map(player => {\n          return /*#__PURE__*/_jsxDEV(Row, {\n            name: player.name,\n            score: player.score\n          }, player.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 29\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: id === host.id ? leaders.length === playerList.length ? /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.button,\n          onClick: () => {\n            socket.emit('isRoundOver', {\n              gameId: gameId\n            });\n          },\n          children: \"Next Round\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Label, {\n          className: styles.waitingLabel,\n          children: \"Waiting for everyone...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 29\n        }, this) : /*#__PURE__*/_jsxDEV(Label, {\n          className: styles.waitingLabel,\n          children: \"Waiting for next round...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n\n_s(LeaderBoardPage, \"4v6aiXo2WoTWGdP5GpbDI+dEaUM=\", false, function () {\n  return [useNavigate];\n});\n\n_c = LeaderBoardPage;\n\nconst Row = _ref => {\n  let {\n    name,\n    score\n  } = _ref;\n  return /*#__PURE__*/_jsxDEV(\"tr\", {\n    children: [/*#__PURE__*/_jsxDEV(\"td\", {\n      children: name\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = Row;\nexport default LeaderBoardPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"LeaderBoardPage\");\n$RefreshReg$(_c2, \"Row\");","map":{"version":3,"sources":["/Users/elijahgreene/Workspace/Skull-King-React/skull-king/src/components/LeaderBoardPage/LeaderBoardPage.js"],"names":["useContext","useEffect","useState","useNavigate","AppContext","PlayerList","Button","ApplicationInput","MainView","TitleHeader","styles","socket","Label","LeaderBoardPage","id","setId","name","gameId","host","setHost","playerList","setPlayerList","currentRound","setCurrentRound","scoreboard","setScoreboard","setWinner","navigate","leaders","setLeaders","on","data","john","players","console","log","sort","a","b","score","gameIsOver","roundIsOver","length","leaderBoardPage","scoreCard","map","player","button","emit","waitingLabel","Row"],"mappings":"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","sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AppContext } from '../../Contexts/AppContext';\nimport PlayerList from '../PlayerList/PlayerList';\nimport Button from '../UI/Button/Button';\nimport ApplicationInput from '../UI/Input/ApplicationInput';\nimport MainView from '../UI/MainView/MainView';\nimport TitleHeader from '../UI/TitleHeader/TitleHeader';\nimport styles from './LeaderBoardPage.module.css';\nimport socket from '../../Socket/Socket';\nimport Label from '../UI/Label/Label';\n\nconst LeaderBoardPage = () => {\n    const {\n        id,\n        setId,\n        name,\n        gameId,\n        host,\n        setHost,\n        playerList,\n        setPlayerList,\n        currentRound,\n        setCurrentRound,\n        scoreboard,\n        setScoreboard,\n        setWinner,\n    } = useContext(AppContext);\n    const navigate = useNavigate();\n\n    const [leaders, setLeaders] = useState([]);\n\n    useEffect(() => {\n        socket.on('leaderboard', (data) => {\n            const john = data.players.players;\n            console.log('JOHN: ', john);\n            setLeaders([...john].sort((a, b) => b.score - a.score));\n        });\n\n        socket.on('isRoundOver', (data) => {\n            if (data.gameIsOver) {\n                navigate('/gameover');\n            } else if (data.roundIsOver) {\n                setCurrentRound(currentRound + 1);\n                navigate('/bid');\n            } else {\n                console.log('round not over');\n            }\n        });\n    }, []);\n\n    useEffect(() => {\n        if (leaders.length > 0) {\n            console.log('LEADERS: ', leaders[0].name);\n            setWinner(leaders[0]);\n        }\n    }, [leaders]);\n\n    return (\n        <MainView>\n            <div className={styles.leaderBoardPage}>\n                <TitleHeader>Leaderboard</TitleHeader>\n                <table className={styles.scoreCard}>\n                    <Row name=\"Player\" score=\"Score\" />\n                    <Row />\n                    {leaders.map((player) => {\n                        return (\n                            <Row\n                                name={player.name}\n                                score={player.score}\n                                key={player.id}\n                            />\n                        );\n                    })}\n                </table>\n                <div>\n                    {id === host.id ? (\n                        leaders.length === playerList.length ? (\n                            <Button\n                                className={styles.button}\n                                onClick={() => {\n                                    socket.emit('isRoundOver', {\n                                        gameId: gameId,\n                                    });\n                                }}\n                            >\n                                Next Round\n                            </Button>\n                        ) : (\n                            <Label className={styles.waitingLabel}>\n                                Waiting for everyone...\n                            </Label>\n                        )\n                    ) : (\n                        <Label className={styles.waitingLabel}>\n                            Waiting for next round...\n                        </Label>\n                    )}\n                </div>\n            </div>\n        </MainView>\n    );\n};\n\nconst Row = ({ name, score }) => {\n    return (\n        <tr>\n            <td>{name}</td>\n            <td>{score}</td>\n        </tr>\n    );\n};\n\nexport default LeaderBoardPage;\n"]},"metadata":{},"sourceType":"module"}