{"ast":null,"code":"var _jsxFileName = \"/Users/elijahgreene/Workspace/Skull-King-React/src/components/GameLobbyPage/GameLobbyPage.js\",\n    _s = $RefreshSig$();\n\nimport { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AppContext } from '../../Contexts/AppContext';\nimport PlayerList from '../PlayerList/PlayerList';\nimport Button from '../UI/Button/Button';\nimport ApplicationInput from '../UI/Input/ApplicationInput';\nimport MainView from '../UI/MainView/MainView';\nimport TitleHeader from '../UI/TitleHeader/TitleHeader';\nimport styles from './GameLobbyPage.module.css';\nimport socket from '../../Socket/Socket';\nimport Label from '../UI/Label/Label';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameLobbyPage = () => {\n  _s();\n\n  const {\n    id,\n    setId,\n    name,\n    gameId,\n    host,\n    setHost,\n    playerList,\n    setPlayerList,\n    setCurrentRound,\n    setScoreboard\n  } = useContext(AppContext);\n  const navigate = useNavigate();\n  useEffect(() => {\n    // Test Connection with Socket\n    socket.emit('pingSocket', 'Hello from React'); // Join room *Will create new if doesn't exist*\n\n    console.log('Attepting to join room with id', gameId);\n    const data = {\n      gameId: gameId,\n      name: name\n    };\n    socket.emit('joinGame', data); // Client Listeners\n\n    socket.on('pingClient', msg => {\n      console.log('New Message: ', msg);\n    });\n    socket.on('setPlayerId', playerId => {\n      console.log(\"PLAYER IDDSSSS: \", playerId);\n      setId(playerId);\n    });\n    socket.on('gameJoined', data => {\n      console.log('game Joined Data: ', data);\n      setPlayerList(data.playerList);\n      setHost(data.playerList[0]);\n    });\n    socket.on('removePlayer', data => {\n      console.log('removing player');\n      setPlayerList(data.players);\n      setHost(data.players[0]);\n    });\n    socket.on('start', data => {\n      console.log('Starting Game: ', data);\n      setCurrentRound(data.currentRound);\n      setScoreboard(data.scoreBoard);\n      localStorage.setItem('skGameId', gameId);\n      localStorage.setItem('skPlayerId', id);\n      navigate('/bid');\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(MainView, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.gameLobbyPage,\n      children: [/*#__PURE__*/_jsxDEV(TitleHeader, {\n        children: \"Skull King\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(PlayerList, {\n        players: playerList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(ApplicationInput, {\n          value: gameId,\n          readOnly: true,\n          children: \"Invite Code\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this), id === host.id ? /*#__PURE__*/_jsxDEV(Button, {\n          className: styles.button,\n          onClick: () => {\n            const data = {\n              gameId: gameId\n            };\n            socket.emit('start', data);\n          },\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Label, {\n          className: styles.waitingLabel,\n          children: \"Waiting for host...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GameLobbyPage, \"TklviJqi0koyCc4hdqP8Y+pWTGw=\", false, function () {\n  return [useNavigate];\n});\n\n_c = GameLobbyPage;\nexport default GameLobbyPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GameLobbyPage\");","map":{"version":3,"sources":["/Users/elijahgreene/Workspace/Skull-King-React/src/components/GameLobbyPage/GameLobbyPage.js"],"names":["useContext","useEffect","useState","useNavigate","AppContext","PlayerList","Button","ApplicationInput","MainView","TitleHeader","styles","socket","Label","GameLobbyPage","id","setId","name","gameId","host","setHost","playerList","setPlayerList","setCurrentRound","setScoreboard","navigate","emit","console","log","data","on","msg","playerId","players","currentRound","scoreBoard","localStorage","setItem","gameLobbyPage","button","waitingLabel"],"mappings":";;;AAAA,SAASA,UAAT,EAAqBC,SAArB,EAAgCC,QAAhC,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,UAAT,QAA2B,2BAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,gBAAP,MAA6B,8BAA7B;AACA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAAA;;AACxB,QAAM;AACFC,IAAAA,EADE;AAEFC,IAAAA,KAFE;AAGFC,IAAAA,IAHE;AAIFC,IAAAA,MAJE;AAKFC,IAAAA,IALE;AAMFC,IAAAA,OANE;AAOFC,IAAAA,UAPE;AAQFC,IAAAA,aARE;AASFC,IAAAA,eATE;AAUFC,IAAAA;AAVE,MAWFvB,UAAU,CAACI,UAAD,CAXd;AAYA,QAAMoB,QAAQ,GAAGrB,WAAW,EAA5B;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACZ;AACAU,IAAAA,MAAM,CAACc,IAAP,CAAY,YAAZ,EAA0B,kBAA1B,EAFY,CAIZ;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,gCAAZ,EAA8CV,MAA9C;AACA,UAAMW,IAAI,GAAG;AACTX,MAAAA,MAAM,EAAEA,MADC;AAETD,MAAAA,IAAI,EAAEA;AAFG,KAAb;AAIAL,IAAAA,MAAM,CAACc,IAAP,CAAY,UAAZ,EAAwBG,IAAxB,EAVY,CAYZ;;AACAjB,IAAAA,MAAM,CAACkB,EAAP,CAAU,YAAV,EAAyBC,GAAD,IAAS;AAC7BJ,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,GAA7B;AACH,KAFD;AAIAnB,IAAAA,MAAM,CAACkB,EAAP,CAAU,aAAV,EAA0BE,QAAD,IAAc;AACnCL,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCI,QAAhC;AACAhB,MAAAA,KAAK,CAACgB,QAAD,CAAL;AACH,KAHD;AAKApB,IAAAA,MAAM,CAACkB,EAAP,CAAU,YAAV,EAAyBD,IAAD,IAAU;AAC9BF,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCC,IAAlC;AACAP,MAAAA,aAAa,CAACO,IAAI,CAACR,UAAN,CAAb;AACAD,MAAAA,OAAO,CAACS,IAAI,CAACR,UAAL,CAAgB,CAAhB,CAAD,CAAP;AACH,KAJD;AAMAT,IAAAA,MAAM,CAACkB,EAAP,CAAU,cAAV,EAA2BD,IAAD,IAAU;AAChCF,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACAN,MAAAA,aAAa,CAACO,IAAI,CAACI,OAAN,CAAb;AACAb,MAAAA,OAAO,CAACS,IAAI,CAACI,OAAL,CAAa,CAAb,CAAD,CAAP;AACH,KAJD;AAMArB,IAAAA,MAAM,CAACkB,EAAP,CAAU,OAAV,EAAoBD,IAAD,IAAU;AACzBF,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BC,IAA/B;AACAN,MAAAA,eAAe,CAACM,IAAI,CAACK,YAAN,CAAf;AACAV,MAAAA,aAAa,CAACK,IAAI,CAACM,UAAN,CAAb;AACAC,MAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCnB,MAAjC;AACAkB,MAAAA,YAAY,CAACC,OAAb,CAAqB,YAArB,EAAmCtB,EAAnC;AACAU,MAAAA,QAAQ,CAAC,MAAD,CAAR;AACH,KAPD;AAQH,GA1CQ,EA0CN,EA1CM,CAAT;AA4CA,sBACI,QAAC,QAAD;AAAA,2BACI;AAAK,MAAA,SAAS,EAAEd,MAAM,CAAC2B,aAAvB;AAAA,8BACI,QAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,UAAD;AAAY,QAAA,OAAO,EAAEjB;AAArB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,gCACI,QAAC,gBAAD;AAAkB,UAAA,KAAK,EAAEH,MAAzB;AAAiC,UAAA,QAAQ,EAAE,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,EAKKH,EAAE,KAAKI,IAAI,CAACJ,EAAZ,gBACG,QAAC,MAAD;AACI,UAAA,SAAS,EAAEJ,MAAM,CAAC4B,MADtB;AAEI,UAAA,OAAO,EAAE,MAAM;AACX,kBAAMV,IAAI,GAAG;AACTX,cAAAA,MAAM,EAAEA;AADC,aAAb;AAGAN,YAAAA,MAAM,CAACc,IAAP,CAAY,OAAZ,EAAqBG,IAArB;AACH,WAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADH,gBAaG,QAAC,KAAD;AAAO,UAAA,SAAS,EAAElB,MAAM,CAAC6B,YAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAlBR;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AA+BH,CA1FD;;GAAM1B,a;UAaeV,W;;;KAbfU,a;AA4FN,eAAeA,aAAf","sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { AppContext } from '../../Contexts/AppContext';\nimport PlayerList from '../PlayerList/PlayerList';\nimport Button from '../UI/Button/Button';\nimport ApplicationInput from '../UI/Input/ApplicationInput';\nimport MainView from '../UI/MainView/MainView';\nimport TitleHeader from '../UI/TitleHeader/TitleHeader';\nimport styles from './GameLobbyPage.module.css';\nimport socket from '../../Socket/Socket';\nimport Label from '../UI/Label/Label';\n\nconst GameLobbyPage = () => {\n    const {\n        id,\n        setId,\n        name,\n        gameId,\n        host,\n        setHost,\n        playerList,\n        setPlayerList,\n        setCurrentRound,\n        setScoreboard,\n    } = useContext(AppContext);\n    const navigate = useNavigate();\n\n    useEffect(() => {\n        // Test Connection with Socket\n        socket.emit('pingSocket', 'Hello from React');\n\n        // Join room *Will create new if doesn't exist*\n        console.log('Attepting to join room with id', gameId);\n        const data = {\n            gameId: gameId,\n            name: name,\n        };\n        socket.emit('joinGame', data);\n\n        // Client Listeners\n        socket.on('pingClient', (msg) => {\n            console.log('New Message: ', msg);\n        });\n\n        socket.on('setPlayerId', (playerId) => {\n            console.log(\"PLAYER IDDSSSS: \", playerId)\n            setId(playerId);\n        });\n\n        socket.on('gameJoined', (data) => {\n            console.log('game Joined Data: ', data);\n            setPlayerList(data.playerList);\n            setHost(data.playerList[0]);\n        });\n\n        socket.on('removePlayer', (data) => {\n            console.log('removing player');\n            setPlayerList(data.players);\n            setHost(data.players[0]);\n        });\n\n        socket.on('start', (data) => {\n            console.log('Starting Game: ', data);\n            setCurrentRound(data.currentRound);\n            setScoreboard(data.scoreBoard);\n            localStorage.setItem('skGameId', gameId)\n            localStorage.setItem('skPlayerId', id)\n            navigate('/bid');\n        });\n    }, []);\n\n    return (\n        <MainView>\n            <div className={styles.gameLobbyPage}>\n                <TitleHeader>Skull King</TitleHeader>\n                <PlayerList players={playerList} />\n                <div>\n                    <ApplicationInput value={gameId} readOnly={true}>\n                        Invite Code\n                    </ApplicationInput>\n\n                    {id === host.id ? (\n                        <Button\n                            className={styles.button}\n                            onClick={() => {\n                                const data = {\n                                    gameId: gameId,\n                                };\n                                socket.emit('start', data);\n                            }}\n                        >\n                            Start\n                        </Button>\n                    ) : (\n                        <Label className={styles.waitingLabel}>\n                            Waiting for host...\n                        </Label>\n                    )}\n                </div>\n            </div>\n        </MainView>\n    );\n};\n\nexport default GameLobbyPage;\n"]},"metadata":{},"sourceType":"module"}